name: CI/Docker/CD
on:
  push:
    branches: ['main', 'develop']
  pull_request:
    branches: ['main', 'develop']

env:
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_PORT: ${{ secrets.DB_PORT }}
  DB_NAME: ${{ secrets.DB_NAME }}

jobs:
  build-and-test:
    strategy:
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
    runs-on: ${{ matrix.os }}

    steps:
    - name: Testing on (${{ matrix.os }})
      uses: actions/checkout@v2
    
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.15
    
    - name: Build
      working-directory: ./src
      run: go build -v ./...
    
    - name: Test
      working-directory: ./src
      run: go test -v ./...

  push-docker-image:
    # run when build is successful
    needs: [build-and-test]
    runs-on: ['ubuntu-latest']
    name: Push Docker image to Hub
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      with:
        driver: docker

    - name: Login to Docker
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}
    
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: ./
        file: ./Dockerfile
        load: true
        tags: json9512/mediumclone-go:latest
        build-args: |
          DBUsername=${{ secrets.DB_USERNAME }}
          DBHost=${{ secrets.DB_HOST }}
          DBPort=${{ secrets.DB_PORT }}
          DBName=${{ secrets.DB_NAME }}
          DBPassword=${{ secrets.DB_PASSWORD }}

    - name: Push
      run: docker push json9512/mediumclone-go:latest
    
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

  # Push docker image to ecr
  push-docker-image-to-ecr:
    needs: [build-and-test]
    runs-on: ['ubuntu-latest']
    name: Push Docker image to ECR
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to AWS ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: mediumclone-go-ecr
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build --build-arg DBUsername=$DB_USERNAME --build-arg DBHost=$DB_HOST --build-arg DBPort=$DB_PORT --build-arg DBName=$DB_NAME --build-arg DBPassword=$DB_PASSWORD -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
    - name: Fill in the new Image ID in the AWS ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-def.json
          container-name: mediumclone-go-container
          image: ${{ steps.build-image.outputs.image }}
    
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: mediumclone-go-service
        cluster: mediumclone-go-cluster
        wait-for-service-stability: true